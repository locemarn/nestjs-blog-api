# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthPayloadDto {
  accessToken: String!
}

input CreatePostInput {
  """Optional list of category IDs to associate"""
  categoryIds: [ID!]
  content: String!
  published: Boolean = false
  title: String!
}

"""Data required to create a new user"""
input CreateUserInput {
  email: String!
  password: String!
  role: Role = USER
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DeletePostPayload {
  success: Boolean!
}

type DeleteUserPayload {
  success: Boolean!
}

type GetPostsOutputDto {
  hasMore: Boolean!
  posts: [Post!]!
  skip: Int!
  take: Int!
  total: Int!
}

"""Credentials required for user login"""
input LoginInput {
  """User's email address OR username"""
  emailOrUsername: String!

  """User's password"""
  password: String!
}

type Mutation {
  createPost(input: CreatePostInput!): Post!

  """Create a new user account."""
  createUser(input: CreateUserInput!): User!

  """Delete a post by ID."""
  deletePost(id: ID!): DeletePostPayload!

  """Delete a user by ID."""
  deleteUser(id: ID!): DeleteUserPayload!
  login(input: LoginInput!): AuthPayloadDto!

  """Publish a draft post."""
  publishPost(id: ID!): Post!
  register(input: RegisterInputDto!): AuthPayloadDto!

  """Unpublish a post, making it a draft."""
  unpublishPost(id: ID!): Post!

  """Update an existing post."""
  updatePost(id: ID!, input: UpdatePostInput!): Post!

  """Update an existing user."""
  updateUser(id: ID!, input: UpdateUserInput!): User!
}

type Post {
  authorId: ID!
  cateforyIds: [ID!]!
  content: String!
  created_at: DateTime!
  id: ID!
  published: Boolean!
  title: String!
  updated_at: DateTime!
}

type Query {
  postById(id: ID!): Post

  """Fetch a list of posts with optional filters and pagination."""
  posts(authorId: ID, categoryId: ID, published: Boolean, skip: Int = 0, take: Int = 10): GetPostsOutputDto!
  userByEmail(email: String!): User
  userById(id: ID!): User
}

"""Data required for a new user to register"""
input RegisterInputDto {
  email: String!
  password: String!

  """Optional role (defaults to USER)"""
  role: Role! = USER
  username: String!
}

"""User roles (USER, ADMIN, etc.)"""
enum Role {
  ADMIN
  USER
}

input UpdatePostInput {
  """Replaces all existing categories with this list"""
  categoryIds: [ID!]
  content: String
  published: Boolean
  title: String
}

"""Data for updating an existing user (provide only fields to change)"""
input UpdateUserInput {
  email: String
  role: Role
  username: String
}

type User {
  """Timestamp when the user was created"""
  created_at: DateTime!

  """User's unique email address"""
  email: String!

  """Unique identifier for the user"""
  id: ID!

  """User's assigned role"""
  role: Role!

  """Timestamp when the user was last updated"""
  updated_at: DateTime!

  """User's unique username"""
  username: String!
}